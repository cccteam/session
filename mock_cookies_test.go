// Code generated by MockGen. DO NOT EDIT.
// Source: ../session/cookies.go
//
// Generated by this command:
//
//	mockgen -package session -source ../session/cookies.go -destination ../session/mock_cookies_test.go
//

// Package session is a generated GoMock package.
package session

import (
	http "net/http"
	reflect "reflect"
	time "time"

	ccc "github.com/cccteam/ccc"
	gomock "go.uber.org/mock/gomock"
)

// MockcookieManager is a mock of cookieManager interface.
type MockcookieManager struct {
	ctrl     *gomock.Controller
	recorder *MockcookieManagerMockRecorder
	isgomock struct{}
}

// MockcookieManagerMockRecorder is the mock recorder for MockcookieManager.
type MockcookieManagerMockRecorder struct {
	mock *MockcookieManager
}

// NewMockcookieManager creates a new mock instance.
func NewMockcookieManager(ctrl *gomock.Controller) *MockcookieManager {
	mock := &MockcookieManager{ctrl: ctrl}
	mock.recorder = &MockcookieManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieManager) EXPECT() *MockcookieManagerMockRecorder {
	return m.recorder
}

// hasValidXSRFToken mocks base method.
func (m *MockcookieManager) hasValidXSRFToken(r *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasValidXSRFToken", r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasValidXSRFToken indicates an expected call of hasValidXSRFToken.
func (mr *MockcookieManagerMockRecorder) hasValidXSRFToken(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasValidXSRFToken", reflect.TypeOf((*MockcookieManager)(nil).hasValidXSRFToken), r)
}

// newAuthCookie mocks base method.
func (m *MockcookieManager) newAuthCookie(w http.ResponseWriter, sameSiteStrict bool, sessionID ccc.UUID, domain string) (map[scKey]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newAuthCookie", w, sameSiteStrict, sessionID, domain)
	ret0, _ := ret[0].(map[scKey]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newAuthCookie indicates an expected call of newAuthCookie.
func (mr *MockcookieManagerMockRecorder) newAuthCookie(w, sameSiteStrict, sessionID, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newAuthCookie", reflect.TypeOf((*MockcookieManager)(nil).newAuthCookie), w, sameSiteStrict, sessionID, domain)
}

// readAuthCookie mocks base method.
func (m *MockcookieManager) readAuthCookie(r *http.Request) (map[scKey]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readAuthCookie", r)
	ret0, _ := ret[0].(map[scKey]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// readAuthCookie indicates an expected call of readAuthCookie.
func (mr *MockcookieManagerMockRecorder) readAuthCookie(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readAuthCookie", reflect.TypeOf((*MockcookieManager)(nil).readAuthCookie), r)
}

// setXSRFTokenCookie mocks base method.
func (m *MockcookieManager) setXSRFTokenCookie(w http.ResponseWriter, r *http.Request, sessionID ccc.UUID, cookieExpiration time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setXSRFTokenCookie", w, r, sessionID, cookieExpiration)
	ret0, _ := ret[0].(bool)
	return ret0
}

// setXSRFTokenCookie indicates an expected call of setXSRFTokenCookie.
func (mr *MockcookieManagerMockRecorder) setXSRFTokenCookie(w, r, sessionID, cookieExpiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setXSRFTokenCookie", reflect.TypeOf((*MockcookieManager)(nil).setXSRFTokenCookie), w, r, sessionID, cookieExpiration)
}

// writeAuthCookie mocks base method.
func (m *MockcookieManager) writeAuthCookie(w http.ResponseWriter, sameSiteStrict bool, cval map[scKey]string, domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeAuthCookie", w, sameSiteStrict, cval, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeAuthCookie indicates an expected call of writeAuthCookie.
func (mr *MockcookieManagerMockRecorder) writeAuthCookie(w, sameSiteStrict, cval, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeAuthCookie", reflect.TypeOf((*MockcookieManager)(nil).writeAuthCookie), w, sameSiteStrict, cval, domain)
}
